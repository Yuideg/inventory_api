// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package supplier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupplierServiceClient is the client API for SupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplierServiceClient interface {
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	SupplierByID(ctx context.Context, in *SupplierByIDRequest, opts ...grpc.CallOption) (*SupplierByIDResponse, error)
	GetSupplierBySupplierID(ctx context.Context, in *SupplierBySupplierIDRequest, opts ...grpc.CallOption) (*SupplierBySupplierIDResponse, error)
	SupplierList(ctx context.Context, in *SupplierListRequest, opts ...grpc.CallOption) (*SupplierListResponse, error)
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error)
	DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
}

type supplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplierServiceClient(cc grpc.ClientConnInterface) SupplierServiceClient {
	return &supplierServiceClient{cc}
}

func (c *supplierServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/CreateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) SupplierByID(ctx context.Context, in *SupplierByIDRequest, opts ...grpc.CallOption) (*SupplierByIDResponse, error) {
	out := new(SupplierByIDResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/SupplierByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) GetSupplierBySupplierID(ctx context.Context, in *SupplierBySupplierIDRequest, opts ...grpc.CallOption) (*SupplierBySupplierIDResponse, error) {
	out := new(SupplierBySupplierIDResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/GetSupplierBySupplierID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) SupplierList(ctx context.Context, in *SupplierListRequest, opts ...grpc.CallOption) (*SupplierListResponse, error) {
	out := new(SupplierListResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/SupplierList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error) {
	out := new(UpdateSupplierResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/UpdateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, "/supplier.SupplierService/DeleteSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServiceServer is the server API for SupplierService service.
// All implementations must embed UnimplementedSupplierServiceServer
// for forward compatibility
type SupplierServiceServer interface {
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	SupplierByID(context.Context, *SupplierByIDRequest) (*SupplierByIDResponse, error)
	GetSupplierBySupplierID(context.Context, *SupplierBySupplierIDRequest) (*SupplierBySupplierIDResponse, error)
	SupplierList(context.Context, *SupplierListRequest) (*SupplierListResponse, error)
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	mustEmbedUnimplementedSupplierServiceServer()
}

// UnimplementedSupplierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupplierServiceServer struct {
}

func (UnimplementedSupplierServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) SupplierByID(context.Context, *SupplierByIDRequest) (*SupplierByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierByID not implemented")
}
func (UnimplementedSupplierServiceServer) GetSupplierBySupplierID(context.Context, *SupplierBySupplierIDRequest) (*SupplierBySupplierIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplierBySupplierID not implemented")
}
func (UnimplementedSupplierServiceServer) SupplierList(context.Context, *SupplierListRequest) (*SupplierListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierList not implemented")
}
func (UnimplementedSupplierServiceServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) mustEmbedUnimplementedSupplierServiceServer() {}

// UnsafeSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplierServiceServer will
// result in compilation errors.
type UnsafeSupplierServiceServer interface {
	mustEmbedUnimplementedSupplierServiceServer()
}

func RegisterSupplierServiceServer(s grpc.ServiceRegistrar, srv SupplierServiceServer) {
	s.RegisterService(&SupplierService_ServiceDesc, srv)
}

func _SupplierService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/CreateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_SupplierByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).SupplierByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/SupplierByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).SupplierByID(ctx, req.(*SupplierByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_GetSupplierBySupplierID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierBySupplierIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).GetSupplierBySupplierID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/GetSupplierBySupplierID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).GetSupplierBySupplierID(ctx, req.(*SupplierBySupplierIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_SupplierList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).SupplierList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/SupplierList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).SupplierList(ctx, req.(*SupplierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/UpdateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supplier.SupplierService/DeleteSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplierService_ServiceDesc is the grpc.ServiceDesc for SupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supplier.SupplierService",
	HandlerType: (*SupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupplier",
			Handler:    _SupplierService_CreateSupplier_Handler,
		},
		{
			MethodName: "SupplierByID",
			Handler:    _SupplierService_SupplierByID_Handler,
		},
		{
			MethodName: "GetSupplierBySupplierID",
			Handler:    _SupplierService_GetSupplierBySupplierID_Handler,
		},
		{
			MethodName: "SupplierList",
			Handler:    _SupplierService_SupplierList_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _SupplierService_UpdateSupplier_Handler,
		},
		{
			MethodName: "DeleteSupplier",
			Handler:    _SupplierService_DeleteSupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supplier/supplier.proto",
}
